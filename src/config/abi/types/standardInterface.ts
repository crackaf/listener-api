/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from 'bn.js';
import { ContractOptions } from 'web3-eth-contract';
import { EventLog } from 'web3-core';
import { EventEmitter } from 'events';
import {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from './types';

export interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type Approval = ContractEventLog<{
  owner: string;
  approved: string;
  tokenId: string;
  0: string;
  1: string;
  2: string;
}>;
export type ApprovalForAll = ContractEventLog<{
  owner: string;
  operator: string;
  approved: boolean;
  0: string;
  1: string;
  2: boolean;
}>;
export type OwnershipTransferred = ContractEventLog<{
  previousOwner: string;
  newOwner: string;
  0: string;
  1: string;
}>;
export type SetURI = ContractEventLog<{
  _uri: string;
  0: string;
}>;
export type Transfer = ContractEventLog<{
  from: string;
  to: string;
  tokenId: string;
  0: string;
  1: string;
  2: string;
}>;

export interface StandardInterface extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions,
  ): StandardInterface;
  clone(): StandardInterface;
  methods: {
    approve(
      to: string,
      tokenId: number | string | BN,
    ): NonPayableTransactionObject<void>;

    balanceOf(owner: string): NonPayableTransactionObject<string>;

    getApproved(
      tokenId: number | string | BN,
    ): NonPayableTransactionObject<string>;

    isApprovedForAll(
      owner: string,
      operator: string,
    ): NonPayableTransactionObject<boolean>;

    name(): NonPayableTransactionObject<string>;

    owner(): NonPayableTransactionObject<string>;

    ownerOf(tokenId: number | string | BN): NonPayableTransactionObject<string>;

    renounceOwnership(): NonPayableTransactionObject<void>;

    safeMint(to: string): NonPayableTransactionObject<void>;

    'safeTransferFrom(address,address,uint256)'(
      from: string,
      to: string,
      tokenId: number | string | BN,
    ): NonPayableTransactionObject<void>;

    'safeTransferFrom(address,address,uint256,bytes)'(
      from: string,
      to: string,
      tokenId: number | string | BN,
      _data: string | number[],
    ): NonPayableTransactionObject<void>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
    ): NonPayableTransactionObject<void>;

    setURI(_uri: string): NonPayableTransactionObject<void>;

    supportsInterface(
      interfaceId: string | number[],
    ): NonPayableTransactionObject<boolean>;

    symbol(): NonPayableTransactionObject<string>;

    tokenByIndex(
      index: number | string | BN,
    ): NonPayableTransactionObject<string>;

    tokenOfOwnerByIndex(
      owner: string,
      index: number | string | BN,
    ): NonPayableTransactionObject<string>;

    tokenURI(
      tokenId: number | string | BN,
    ): NonPayableTransactionObject<string>;

    totalSupply(): NonPayableTransactionObject<string>;

    transferFrom(
      from: string,
      to: string,
      tokenId: number | string | BN,
    ): NonPayableTransactionObject<void>;

    transferOwnership(newOwner: string): NonPayableTransactionObject<void>;

    uri(): NonPayableTransactionObject<string>;
  };
  events: {
    Approval(cb?: Callback<Approval>): EventEmitter;
    Approval(options?: EventOptions, cb?: Callback<Approval>): EventEmitter;

    ApprovalForAll(cb?: Callback<ApprovalForAll>): EventEmitter;
    ApprovalForAll(
      options?: EventOptions,
      cb?: Callback<ApprovalForAll>,
    ): EventEmitter;

    OwnershipTransferred(cb?: Callback<OwnershipTransferred>): EventEmitter;
    OwnershipTransferred(
      options?: EventOptions,
      cb?: Callback<OwnershipTransferred>,
    ): EventEmitter;

    SetURI(cb?: Callback<SetURI>): EventEmitter;
    SetURI(options?: EventOptions, cb?: Callback<SetURI>): EventEmitter;

    Transfer(cb?: Callback<Transfer>): EventEmitter;
    Transfer(options?: EventOptions, cb?: Callback<Transfer>): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: 'Approval', cb: Callback<Approval>): void;
  once(event: 'Approval', options: EventOptions, cb: Callback<Approval>): void;

  once(event: 'ApprovalForAll', cb: Callback<ApprovalForAll>): void;
  once(
    event: 'ApprovalForAll',
    options: EventOptions,
    cb: Callback<ApprovalForAll>,
  ): void;

  once(event: 'OwnershipTransferred', cb: Callback<OwnershipTransferred>): void;
  once(
    event: 'OwnershipTransferred',
    options: EventOptions,
    cb: Callback<OwnershipTransferred>,
  ): void;

  once(event: 'SetURI', cb: Callback<SetURI>): void;
  once(event: 'SetURI', options: EventOptions, cb: Callback<SetURI>): void;

  once(event: 'Transfer', cb: Callback<Transfer>): void;
  once(event: 'Transfer', options: EventOptions, cb: Callback<Transfer>): void;
}
